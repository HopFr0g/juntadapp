{
	"Node Router Snippet": {
		"prefix": "Node Router Snippet",
		"body": [
			"const ${1: /* Nombre del modelo (inicial en minúscula) */}Controller = require(\"../controllers/${1: /* Nombre del modelo (inicial en minúscula) */}Controller.js\");",
			"",
			"const express = require(\"express\");",
			"const router = express.Router();",
			"",
			"router.get(\"/\", ${1: /* Nombre del modelo (inicial en minúscula) */}Controller.findAll);",
			"router.get(\"/:id\", ${1: /* Nombre del modelo (inicial en minúscula) */}Controller.findById);",
			"router.post(\"/\", ${1: /* Nombre del modelo (inicial en minúscula) */}Controller.create);",
			"",
			"module.exports = router;"
		]
	},
	"Node Controller Snippet": {
		"prefix": "Node Controller Snippet",
		"body": [
			"const constants = require(\"../util/constants.js\");",
			"const responseBuilder = require(\"../util/responseBuilder.js\");",
			"",
			"const ${1: /* Nombre del modelo (inicial en minúscula) */}Service = require(\"../services/${1: /* Nombre del modelo (inicial en minúscula) */}Service.js\");",
			"",
			"const findAll = async (req, res) => {",
			"\tlet response;",
			"\t",
			"\ttry {",
			"\tlist = await ${1: /* Nombre del modelo (inicial en minúscula) */}Service.findAll();",
			"\t",
			"\tif (!Array.isArray(list) || list.length == 0)",
			"\t\t\tthrow constants.ENTIDADES_NO_ENCONTRADAS;",
			"\t\t",
			"\t\tresponse = responseBuilder.getOkResponse(constants.ENTIDADES_ENCONTRADAS, list);",
			"\t} catch (error) {",
			"\t\tresponse = responseBuilder.getBadResponse(error, 500);",
			"\t}",
			"\t",
			"\tres.status(response.status).json(response);",
			"};",
			"",
			"const findById = async (req, res) => {",
			"\tlet response;",
			"\t",
			"\ttry {",
			"\t\tlet id = req.params.id;",
			"\t\t",
			"\t\t${1: /* Nombre del modelo (inicial en minúscula) */} = await ${1: /* Nombre del modelo (inicial en minúscula) */}Service.findById(id);",
			"\t\t",
			"\t\tresponse = responseBuilder.getOkResponse(constants.ENTIDAD_ENCONTRADA + id, ${1: /* Nombre del modelo (inicial en minúscula) */});",
			"\t} catch (error) {",
			"\t\tresponse = responseBuilder.getBadResponse(error, 500);",
			"\t}",
			"\t",
			"\tres.status(response.status).json(response);",
			"};",
			"",
			"const create = async (req, res) => {",
			"\tlet response;",
			"\t",
			"\ttry {",
			"\t\tlet requestBody = req.body;",
			"\t\tlet requestIp = req.ip;",
			"\t\t",
			"\t\t${1: /* Nombre del modelo (inicial en minúscula) */} = await ${1: /* Nombre del modelo (inicial en minúscula) */}Service.create(requestBody, requestIp);",
			"\t\t",
			"\t\tresponse = responseBuilder.getOkResponse(constants.CREACION_EXITOSA + ${1: /* Nombre del modelo (inicial en minúscula) */}.id, ${1: /* Nombre del modelo (inicial en minúscula) */});",
			"\t} catch (error) {",
			"\t\tresponse = responseBuilder.getBadResponse(error, 500);",
			"\t}",
			"\t",
			"\tres.status(response.status).json(response);",
			"};",
			"",
			"module.exports = {",
			"\tfindAll,",
			"\tfindById,",
			"\tcreate",
			"};"
		]
	},
	"Node Service Snippet": {
		"prefix": "Node Service Snippet",
		"body": [
			"const constants = require(\"../util/constants.js\");",
			"",
			"const ${2: /* Nombre del modelo (inicial en mayúscula) */} = require(\"../models/${2: /* Nombre del modelo (inicial en mayúscula) */}.js\");",
			"",
			"/* ------------------------------------------------ Métodos privados: ------------------------------------------------ */",
			"",
			"",
			"",
			"/* ------------------------------------------------ Métodos públicos: ------------------------------------------------ */",
			"",
			"const findAll = async () => {",
			"\ttry {",
			"\t\tlet all${3: /* Nombre del modelo en plural (inicial en mayúscula) */} = await ${2: /* Nombre del modelo (inicial en mayúscula) */}.findAll({",
			"\t\t\t// attributes: [],",
			"\t\t\t// include: []",
			"\t\t});",
			"\t\treturn all${3: /* Nombre del modelo en plural (inicial en mayúscula) */};",
			"\t} catch (error) {",
			"\t\tthrow error;",
			"\t}",
			"};",
			"",
			"const findById = async id => {",
			"\ttry {",
			"\t\tlet ${1: /* Nombre del modelo (inicial en minúscula) */} = await ${2: /* Nombre del modelo (inicial en mayúscula) */}.findOne({",
			"\t\t\t// attributes: [],",
			"\t\t\t// include: [],",
			"\t\t\twhere: {",
			"\t\t\t\tid",
			"\t\t\t}",
			"\t\t});",
			"\t\tif (${1: /* Nombre del modelo (inicial en minúscula) */} == null)",
			"\t\t\tthrow constants.ENTIDAD_NO_ENCONTRADA + id;",
			"\t\treturn ${1: /* Nombre del modelo (inicial en minúscula) */};",
			"\t} catch (error) {",
			"\t\tthrow error;",
			"\t}",
			"};",
			"",
			"const create = async ${1: /* Nombre del modelo (inicial en minúscula) */} => {",
			"\ttry {",
			"\t\t${1: /* Nombre del modelo (inicial en minúscula) */} = await ${2: /* Nombre del modelo (inicial en mayúscula) */}.create(${1: /* Nombre del modelo (inicial en minúscula) */});",
			"\t\treturn ${1: /* Nombre del modelo (inicial en minúscula) */};",
			"\t} catch (error) {",
			"\t\tthrow error;",
			"\t}",
			"};",
			"",
			"module.exports = {",
			"\tfindAll,",
			"\tfindById,",
			"\tcreate",
			"};"
		]
	},
	"Node Model Snippet": {
		"prefix": "Node Model Snippet",
		"body": [
			"const Sequelize = require(\"sequelize\");",
			"const sequelize = require(\"../config/sequelize.js\");",
			"",
			"const ${2: /* Nombre del modelo (inicial en mayúscula) */} = sequelize.define(",
			"\t\"${1: /* Nombre de la tabla */}\",",
			"\t{",
			"\t\tid: {",
			"\t\t\tfield: \"id\",",
			"\t\t\ttype: Sequelize.INTEGER,",
			"\t\t\tallowNull: false,",
			"\t\t\tprimaryKey: true,",
			"\t\t\tautoIncrement: true",
			"\t\t}",
			"\t},",
			"\t{",
			"\t\ttimestamps: false,",
			"\t\tfreezeTableName: true,",
			"\t\ttableName: \"${1: /* Nombre de la tabla */}\"",
			"\t}",
			");",
			"",
			"module.exports = ${2: /* Nombre del modelo (inicial en mayúscula) */};"
		]
	}
}